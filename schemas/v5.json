{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "LLM mini-program specification v5.0.0",
  "type": "object",
  "definitions": {
    "semver": {
      "type": "string",
      "pattern": "^v(?:0|[1-9]\\d*)(?:\\.(?:0|[1-9]\\d*)){0,2}(?:-(?:0|[1-9]\\d*|[A-Za-z-][0-9A-Za-z-]*)(?:\\.(?:0|[1-9]\\d*|[A-Za-z-][0-9A-Za-z-]*))*)?(?:\\+[0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*)?$"
    },
    "schemaOrRef": {
      "description": "Schema fragment or reference describing the shape of an I/O payload.",
      "oneOf": [
        {
          "type": "object"
        },
        {
          "type": "string",
          "minLength": 2
        }
      ]
    },
    "ioSource": {
      "type": "object",
      "description": "Declarative source of an input payload so the compiler can reconstruct the dependency graph.",
      "required": [
        "kind"
      ],
      "properties": {
        "kind": {
          "type": "string",
          "enum": [
            "instance",
            "global",
            "phase_output"
          ]
        },
        "phase": {
          "type": "string",
          "minLength": 1,
          "description": "Name of the phase that produces the referenced output port."
        },
        "port": {
          "type": "string",
          "minLength": 1,
          "description": "Name of the output port within the producing phase."
        },
        "path": {
          "type": "string",
          "minLength": 1,
          "description": "JSON Pointer (or dot path) pointing to the data within the source envelope."
        },
        "description": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "allOf": [
        {
          "if": {
            "properties": {
              "kind": {
                "const": "phase_output"
              }
            },
            "required": [
              "kind"
            ]
          },
          "then": {
            "required": [
              "phase",
              "port"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "kind": {
                "enum": [
                  "instance",
                  "global"
                ]
              }
            },
            "required": [
              "kind"
            ]
          },
          "then": {
            "required": [
              "path"
            ]
          }
        }
      ]
    },
    "phaseInput": {
      "type": "object",
      "required": [
        "name",
        "schema",
        "source"
      ],
      "properties": {
        "name": {
          "type": "string",
          "minLength": 1
        },
        "schema": {
          "$ref": "#/definitions/schemaOrRef"
        },
        "source": {
          "$ref": "#/definitions/ioSource"
        },
        "description": {
          "type": "string"
        },
        "optional": {
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "phaseOutput": {
      "type": "object",
      "required": [
        "name",
        "schema"
      ],
      "properties": {
        "name": {
          "type": "string",
          "minLength": 1
        },
        "schema": {
          "$ref": "#/definitions/schemaOrRef"
        },
        "description": {
          "type": "string"
        },
        "exposes_as": {
          "type": "string",
          "minLength": 1,
          "description": "Optional alias for wiring this output into other systems (e.g. exported return value)."
        }
      },
      "additionalProperties": false
    },
    "phaseOutputRef": {
      "type": "object",
      "required": [
        "phase",
        "port"
      ],
      "properties": {
        "phase": {
          "type": "string",
          "minLength": 1
        },
        "port": {
          "type": "string",
          "minLength": 1
        }
      },
      "additionalProperties": false
    },
    "branchDescriptor": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "minLength": 1
        },
        "description": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {}
      }
    },
    "controlNode": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "phase",
            "if",
            "loop",
            "parallel",
            "end"
          ]
        },
        "phase": {
          "type": "string",
          "minLength": 1,
          "description": "Name of the phase executed by this node. Defaults to the node id when omitted."
        },
        "description": {
          "type": "string"
        },
        "condition": {
          "type": "string",
          "minLength": 1,
          "description": "Expression or natural-language condition evaluated by this node."
        },
        "branches": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/branchDescriptor"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "until": {
          "type": "string",
          "minLength": 1,
          "description": "Termination condition for loop nodes (expressed as natural language or DSL)."
        },
        "body": {
          "type": "string",
          "minLength": 1,
          "description": "Entry node executed for each loop iteration."
        },
        "max_iterations": {
          "type": "integer",
          "minimum": 1,
          "description": "Optional safety bound on loop iterations."
        },
        "join": {
          "type": "string",
          "minLength": 1,
          "description": "Node that synchronises parallel branches."
        },
        "metadata": {
          "type": "object"
        }
      },
      "patternProperties": {
        "^x-": {}
      },
      "additionalProperties": false,
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "phase"
              }
            },
            "required": [
              "type"
            ]
          },
          "then": {
            "properties": {
              "condition": false,
              "branches": false,
              "until": false,
              "body": false,
              "max_iterations": false,
              "join": false
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "if"
              }
            },
            "required": [
              "type"
            ]
          },
          "then": {
            "required": [
              "condition",
              "branches"
            ],
            "properties": {
              "body": false,
              "until": false,
              "max_iterations": false
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "loop"
              }
            },
            "required": [
              "type"
            ]
          },
          "then": {
            "required": [
              "body",
              "until"
            ],
            "properties": {
              "branches": false
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "parallel"
              }
            },
            "required": [
              "type"
            ]
          },
          "then": {
            "required": [
              "branches"
            ],
            "properties": {
              "condition": false,
              "until": false
            }
          }
        }
      ]
    },
    "controlEdge": {
      "type": "object",
      "required": [
        "from",
        "to",
        "kind"
      ],
      "properties": {
        "from": {
          "type": "string",
          "minLength": 1
        },
        "to": {
          "type": "string",
          "minLength": 1
        },
        "condition": {
          "type": "string",
          "minLength": 1
        },
        "kind": {
          "type": "string",
          "enum": [
            "normal",
            "success",
            "failure",
            "fallback",
            "parallel",
            "loop"
          ]
        },
        "description": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {}
      }
    },
    "controlFlowGraph": {
      "type": "object",
      "required": [
        "entry",
        "nodes",
        "edges"
      ],
      "properties": {
        "entry": {
          "type": "string",
          "minLength": 1
        },
        "nodes": {
          "type": "object",
          "minProperties": 1,
          "additionalProperties": {
            "$ref": "#/definitions/controlNode"
          },
          "patternProperties": {
            "^x-": {}
          }
        },
        "edges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/controlEdge"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "description": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {}
      }
    },
    "phaseError": {
      "type": "object",
      "required": [
        "code",
        "description"
      ],
      "properties": {
        "code": {
          "type": "string",
          "minLength": 1
        },
        "description": {
          "type": "string",
          "minLength": 1
        },
        "severity": {
          "type": "string",
          "enum": [
            "fatal",
            "retryable",
            "warning"
          ]
        },
        "metadata": {
          "type": "object"
        }
      },
      "patternProperties": {
        "^x-": {}
      },
      "additionalProperties": false
    },
    "retryBackoff": {
      "type": "object",
      "properties": {
        "strategy": {
          "type": "string",
          "enum": [
            "fixed",
            "linear",
            "exponential",
            "jittered"
          ]
        },
        "initial_delay_ms": {
          "type": "integer",
          "minimum": 0
        },
        "max_delay_ms": {
          "type": "integer",
          "minimum": 0
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {}
      }
    },
    "retryPolicy": {
      "type": "object",
      "properties": {
        "max_attempts": {
          "type": "integer",
          "minimum": 1
        },
        "retryable_errors": {
          "type": "array",
          "items": {
            "type": "string",
            "minLength": 1
          },
          "uniqueItems": true
        },
        "backoff": {
          "$ref": "#/definitions/retryBackoff"
        },
        "notes": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {}
      }
    },
    "phaseFallback": {
      "type": "object",
      "properties": {
        "phase": {
          "type": "string",
          "minLength": 1
        },
        "reason": {
          "type": "string"
        },
        "mode": {
          "type": "string",
          "enum": [
            "replace",
            "append",
            "manual"
          ]
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {}
      }
    },
    "qualityMetric": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "minLength": 1
        },
        "target": {
          "type": "number"
        },
        "unit": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {}
      }
    },
    "phaseSemantics": {
      "type": "object",
      "required": [
        "category"
      ],
      "properties": {
        "category": {
          "type": "string",
          "enum": [
            "classification",
            "extraction",
            "generation",
            "summarization",
            "routing",
            "retrieval",
            "post-processing",
            "evaluation",
            "analysis"
          ]
        },
        "capabilities": {
          "type": "array",
          "items": {
            "type": "string",
            "minLength": 1
          },
          "uniqueItems": true
        },
        "quality_metrics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/qualityMetric"
          },
          "uniqueItems": true
        },
        "ontology_ref": {
          "type": "string",
          "format": "uri"
        },
        "description": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {}
      }
    },
    "compositionField": {
      "type": "object",
      "required": [
        "name",
        "source"
      ],
      "properties": {
        "name": {
          "type": "string",
          "minLength": 1
        },
        "source": {
          "$ref": "#/definitions/ioSource"
        },
        "transform": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {}
      }
    },
    "compositionArrayItem": {
      "type": "object",
      "properties": {
        "source": {
          "$ref": "#/definitions/ioSource"
        },
        "expression": {
          "type": "string",
          "minLength": 1
        },
        "description": {
          "type": "string"
        }
      },
      "anyOf": [
        {
          "required": [
            "source"
          ]
        },
        {
          "required": [
            "expression"
          ]
        }
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {}
      }
    },
    "compositionTemplate": {
      "type": "object",
      "required": [
        "template"
      ],
      "properties": {
        "template": {
          "type": "string",
          "minLength": 1
        },
        "variables": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "name",
              "source"
            ],
            "properties": {
              "name": {
                "type": "string",
                "minLength": 1
              },
              "source": {
                "$ref": "#/definitions/ioSource"
              }
            },
            "additionalProperties": false,
            "patternProperties": {
              "^x-": {}
            }
          },
          "uniqueItems": true
        },
        "description": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {}
      }
    },
    "compositionExpression": {
      "type": "object",
      "required": [
        "expression"
      ],
      "properties": {
        "expression": {
          "type": "string",
          "minLength": 1
        },
        "language": {
          "type": "string",
          "enum": [
            "jsonpath",
            "jmespath",
            "jq",
            "liquid"
          ]
        },
        "description": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {}
      }
    },
    "compositionBuild": {
      "type": "object",
      "properties": {
        "object": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/compositionField"
          },
          "minItems": 1
        },
        "array": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/compositionArrayItem"
          },
          "minItems": 1
        },
        "template": {
          "$ref": "#/definitions/compositionTemplate"
        },
        "expression": {
          "$ref": "#/definitions/compositionExpression"
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {}
      },
      "anyOf": [
        {
          "required": [
            "object"
          ]
        },
        {
          "required": [
            "array"
          ]
        },
        {
          "required": [
            "template"
          ]
        },
        {
          "required": [
            "expression"
          ]
        }
      ]
    },
    "compositionOutput": {
      "type": "object",
      "required": [
        "name",
        "build"
      ],
      "properties": {
        "name": {
          "type": "string",
          "minLength": 1
        },
        "description": {
          "type": "string"
        },
        "schema": {
          "$ref": "#/definitions/schemaOrRef"
        },
        "build": {
          "$ref": "#/definitions/compositionBuild"
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {}
      }
    },
    "artifactSource": {
      "type": "object",
      "required": [
        "uri",
        "type",
        "version",
        "checksum",
        "integrity"
      ],
      "properties": {
        "uri": {
          "type": "string",
          "minLength": 1
        },
        "type": {
          "type": "string",
          "enum": [
            "code",
            "prompt",
            "model",
            "dataset",
            "config",
            "script",
            "other"
          ]
        },
        "version": {
          "type": "string",
          "minLength": 1
        },
        "checksum": {
          "type": "string",
          "minLength": 6
        },
        "integrity": {
          "type": "object",
          "required": [
            "algorithm",
            "value"
          ],
          "properties": {
            "algorithm": {
              "type": "string",
              "minLength": 1
            },
            "value": {
              "type": "string",
              "minLength": 6
            }
          },
          "additionalProperties": false,
          "patternProperties": {
            "^x-": {}
          }
        },
        "description": {
          "type": "string"
        },
        "metadata": {
          "type": "object"
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {}
      }
    }
  },
  "properties": {
    "spec_version": {
      "$ref": "#/definitions/semver",
      "description": "Version of this specification/schema; not the version of the described document."
    },
    "meta": {
      "type": "object",
      "required": [
        "title",
        "version"
      ],
      "properties": {
        "title": {
          "type": "string",
          "minLength": 1
        },
        "version": {
          "$ref": "#/definitions/semver"
        },
        "purpose": {
          "type": "string"
        },
        "notes": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "algorithm": {
      "type": "object",
      "required": [
        "name",
        "graph",
        "outputs"
      ],
      "properties": {
        "name": {
          "type": "string",
          "minLength": 1
        },
        "phases": {
          "type": "array",
          "minItems": 1,
          "items": {
            "type": "string",
            "minLength": 1
          },
          "uniqueItems": true
        },
        "graph": {
          "$ref": "#/definitions/controlFlowGraph"
        },
        "outputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/compositionOutput"
          },
          "minItems": 1,
          "uniqueItems": true
        }
      },
      "additionalProperties": false
    },
    "implementation": {
      "type": "object",
      "required": [
        "language",
        "entrypoint",
        "return_contract"
      ],
      "properties": {
        "language": {
          "type": "string",
          "minLength": 1
        },
        "entrypoint": {
          "type": "string",
          "minLength": 1
        },
        "parameters": {
          "type": "object",
          "additionalProperties": {
            "oneOf": [
              {
                "type": "string",
                "minLength": 1
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string"
                  },
                  "required": {
                    "type": "boolean"
                  },
                  "default": {},
                  "description": {
                    "type": "string"
                  },
                  "enum": {
                    "type": "array"
                  },
                  "schema": {
                    "type": "object"
                  }
                },
                "additionalProperties": false
              }
            ]
          }
        },
        "return_contract": {
          "type": "object",
          "required": [
            "schema"
          ],
          "properties": {
            "schema": {
              "$ref": "#/definitions/schemaOrRef"
            },
            "produced_by": {
              "$ref": "#/definitions/phaseOutputRef"
            }
          },
          "additionalProperties": false
        },
        "phase_contracts": {
          "type": "object",
          "minProperties": 1,
          "propertyNames": {
            "type": "string",
            "minLength": 1
          },
          "additionalProperties": {
            "type": "object",
            "required": [
              "inputs",
              "outputs",
              "errors",
              "semantics"
            ],
            "properties": {
              "description": {
                "type": "string"
              },
              "inputs": {
                "type": "array",
                "minItems": 1,
                "items": {
                  "$ref": "#/definitions/phaseInput"
                }
              },
              "outputs": {
                "type": "array",
                "minItems": 1,
                "items": {
                  "$ref": "#/definitions/phaseOutput"
                }
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/phaseError"
                },
                "uniqueItems": true,
                "minItems": 1
              },
              "retry_policy": {
                "$ref": "#/definitions/retryPolicy"
              },
              "fallback": {
                "$ref": "#/definitions/phaseFallback"
              },
              "semantics": {
                "$ref": "#/definitions/phaseSemantics"
              }
            },
            "additionalProperties": false,
            "allOf": [
              {
                "if": {
                  "properties": {
                    "errors": {
                      "contains": {
                        "properties": {
                          "severity": {
                            "const": "retryable"
                          }
                        },
                        "required": [
                          "severity"
                        ]
                      }
                    }
                  },
                  "required": [
                    "errors"
                  ]
                },
                "then": {
                  "required": [
                    "retry_policy"
                  ]
                }
              }
            ]
          }
        },
        "source": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/artifactSource"
          },
          "minItems": 1
        },
        "formats": {}
      },
      "additionalProperties": false
    }
  },
  "patternProperties": {
    "^x-": {}
  },
  "required": [
    "spec_version",
    "meta",
    "algorithm",
    "implementation"
  ],
  "additionalProperties": false,
  "description": "Extends the mini-program schema with mandatory control-flow graphs, explicit error handling semantics, declarative output compositions, semantic phase contracts, and fully versioned implementation artifacts."
}
